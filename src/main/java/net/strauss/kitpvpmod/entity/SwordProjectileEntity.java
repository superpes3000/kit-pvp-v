package net.strauss.kitpvpmod.entity;

import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LivingEntity;
import net.minecraft.world.entity.projectile.ThrowableItemProjectile;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.Level;
import net.minecraft.world.phys.Vec3;
import net.minecraft.world.phys.EntityHitResult;
import net.minecraft.world.damagesource.DamageSource;
import net.minecraft.world.entity.Entity;

public class SwordProjectileEntity extends ThrowableItemProjectile {
    private Vec3 startPos;
    @Override
    protected double getDefaultGravity() {
        return 0.0f;
    }

    // üîπ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ /summon
    public SwordProjectileEntity(EntityType<? extends SwordProjectileEntity> type, Level level) {
        super(type, level);
    }

    // üîπ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∏ –±—Ä–æ—Å–∫–µ —Å –ø—Ä–µ–¥–º–µ—Ç–∞
    public SwordProjectileEntity(Level level, LivingEntity owner, ItemStack stack) {
        super(ModEntities.SWORD_PROJECTILE.get(), owner, level);
        this.setItem(stack.copy());
        this.startPos = this.position();
    }

    // üîπ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ‚Äî –Ω–µ–ª—å–∑—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null
    @Override
    protected Item getDefaultItem() {
        return Items.IRON_SWORD; // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –º–µ—á
    }

    // üîπ –í—ã–∫–ª—é—á–∞–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é


    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ 20 –±–ª–æ–∫–æ–≤
    @Override
    public void tick() {
        super.tick();
        if (startPos == null) startPos = this.position();

        if (this.position().distanceToSqr(startPos) > 20 * 20) {
            this.discard();
            return;
        }
    }

    // üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
    @Override
    protected void onHitEntity(EntityHitResult hitResult) {
        super.onHitEntity(hitResult);
        Entity target = hitResult.getEntity();
        Entity owner = this.getOwner();

        if (target instanceof LivingEntity living && owner instanceof LivingEntity attacker) {
            DamageSource source = this.damageSources().thrown(this, attacker);
            living.hurt(source, 6.0F); // —É—Ä–æ–Ω
        }

        this.discard(); // –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
    }
}
